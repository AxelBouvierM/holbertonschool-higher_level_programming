"""class BaseGeometry"""

"""Test that validates value"""
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> base = BaseGeometry()

>>> base.integer_validator("my_int", 12)
>>> base.integer_validator("width", 89)
>>> base.integer_validator("", 100)
>>> base.integer_validator("test0", 1012210)


>>> base.area()
Traceback (most recent call last):
Exception: area() is not implemented

>>> base.integer_validator("age", -4)
Traceback (most recent call last):
ValueError: age must be greater than 0

>>> base.integer_validator("age", 0)
Traceback (most recent call last):
ValueError: age must be greater than 0

>>> base.integer_validator("age", "Hello")
Traceback (most recent call last):
TypeError: age must be an integer

>>> base.integer_validator("test", [3])
Traceback (most recent call last):
TypeError: test must be an integer

>>> base.integer_validator("testing", 4.1)
Traceback (most recent call last):
TypeError: testing must be an integer

>>> base.integer_validator("now", -80, 21)
Traceback (most recent call last):
TypeError: integer_validator() takes 3 positional arguments but 4 were given

>>> base.integer_validator("test1")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> base.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> base.area("xxx")
Traceback (most recent call last):
TypeError: area() takes 1 positional argument but 2 were given

>>> base.integer_validator("test2", {"x": 5})
Traceback (most recent call last):
TypeError: test2 must be an integer


